import { CommonModule } from '@angular/common';
import { Component, OnChanges, OnInit } from '@angular/core';
import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { Store } from '@ngrx/store';
import { AuthActions } from '../../../auth/store/actions';
import { taskActions } from '../../store/actions';
import { combineLatest, filter, map, Subscription, take } from 'rxjs';
import { selectCurrentUser } from '../../../auth/store/reducer';
import { selectSelectedTask, selectTasks } from '../../store/reducer';
import { TaskInterface } from '../../types/task.interface';

@Component({
  selector: 'app-landing-page-todo',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './landing-page-todo.component.html',
  styleUrl: './landing-page-todo.component.css'
})
export class LandingPageTodoComponent {
  formStatus: string = 'Add New';
  isFormVisible: boolean = false;
  editTask: TaskInterface | null = null;
  taskForm = this.fb.nonNullable.group({
    title: ['', [Validators.required, Validators.minLength(3)]],
    description: ['', Validators.required],
    status: ['pending', Validators.required]
  });

  data$ = combineLatest({
    user: this.store.select(selectCurrentUser),
    tasks: this.store.select(selectTasks),
    selectedTask: this.store.select(selectSelectedTask)
  })

  // Add subscription to handle selectedTask updates
  private selectedTaskSubscription?: Subscription;

  constructor(private fb: FormBuilder, private store: Store) {
    this.store.dispatch(AuthActions.getCurrentUser())
    this.store.dispatch(taskActions.getAllTasks())
  }

  ngOnDestroy() {
    this.selectedTaskSubscription?.unsubscribe();
  }

  onSubmit(formStatus: string) {
    if (formStatus === 'Add New') {
      this.store.dispatch(taskActions.addTask(this.taskForm.getRawValue()));
    }
    if (formStatus === 'Edit' && this.editTask?.id) {
      this.store.dispatch(taskActions.updateTask({
        id: this.editTask.id,
        task: this.taskForm.getRawValue()
      }));
    }
    this.closeModal();
  }

  openModal(formStatus: string, id?: number) {
    this.formStatus = formStatus;

    // Cleanup previous subscription if exists
    this.selectedTaskSubscription?.unsubscribe();

    if (formStatus === 'Add New') {
      this.editTask = null;
      this.taskForm.reset({
        title: '',
        description: '',
        status: 'pending'
      });
    }

    if (formStatus === 'Edit' && id) {
      // Reset form before loading new data
      this.taskForm.reset();
      this.editTask = null;

      this.store.dispatch(taskActions.getSingleTask({ id }));

      // Create new subscription for selectedTask
      this.selectedTaskSubscription = this.store.select(selectSelectedTask)
        .pipe(
          //@ts-ignore
          filter(task => task !== null && task.id === id), // Ensure we have the correct task
          take(1)
        )
        .subscribe(task => {
          if (task) {
            this.editTask = task;
            this.taskForm.patchValue({
              title: task.title,
              description: task.description,
              status: task.status
            });
          }
        });
    }

    this.isFormVisible = true;
  }

  closeModal() {
    this.selectedTaskSubscription?.unsubscribe();
    this.editTask = null;
    this.taskForm.reset({
      title: '',
      description: '',
      status: 'pending'
    });
    this.isFormVisible = false;
  }

  deleteTask(id: number) {
    console.log(id);
    this.store.dispatch(taskActions.deleteTask({ id }));
  }
}


